import streamlit as st
import os
import pandas as pd


# Функция для создания и редактирования базы данных автомобильных номеров
# Позволяет пользователям добавлять, изменять и удалять записи о транспортных средствах
def edit_data():
    
    # Создаем красивый заголовок с радужным разделителем
    st.header(":violet[Создание и редактирование базы данных номеров автомобилей]", divider='rainbow')
     
    # Формируем уникальный путь к файлу Excel для каждого пользователя
    excel_file_path = f'users/{st.session_state.username}/data/the_base_of_admission.xlsx'
    
    # Автоматически создаем необходимую структуру папок для хранения данных
    os.makedirs(os.path.dirname(excel_file_path), exist_ok=True)
    
    # Если файл базы данных отсутствует, создаем новый с заданной структурой
    if not os.path.exists(excel_file_path):
        
        # Инициализируем пустую таблицу с определенными столбцами
        df = pd.DataFrame({
            'Дата': pd.Series(dtype=str),          # Дата регистрации
            'Описание': pd.Series(dtype=str),      # Описание автомобиля или примечания
            'Номер': pd.Series(dtype=str),         # Номер автомобиля
            'Регион': pd.Series(dtype=str),        # Код региона
            'Номер авто': pd.Series(dtype=str)     # Полный номер с регионом
        })
        
        # Сохраняем пустую структуру в новый файл Excel        
        df.to_excel(excel_file_path, index=False)
        
    # Загружаем существующие данные из файла Excel
    df = pd.read_excel(excel_file_path).astype(str)

    # Создаем дополнительную копию данных в формате CSV для резервного копирования
    csv_file_path = f'users/{st.session_state.username}/data/the_base_of_admission.csv'

    # Инициализируем состояние редактирования при первом запуске
    if 'editing_mode' not in st.session_state:
        st.session_state.editing_mode = False
    
    # Создаем временное хранилище данных для отмены изменений
    if 'temp_data' not in st.session_state:
        st.session_state.temp_data = df.copy()

    # Добавляем кнопку для активации режима редактирования
    if not st.session_state.editing_mode:
        if st.sidebar.button(":violet[Редактировать]",  use_container_width=True):
            st.session_state.editing_mode = True
            st.rerun()
            
    # Если режим редактирования активен, показываем интерактивную таблицу
    if st.session_state.editing_mode:
                    
        # Создаем редактируемую таблицу с настроенными столбцами
        edited_df = st.data_editor(
        df[['Дата', 'Описание', 'Номер', 'Регион']],
        use_container_width=True,
        num_rows="dynamic",
        column_config={
            "Дата": st.column_config.TextColumn(
                "Дата",
                help="Формат: гггг-мм-дд"
            ),
            "Описание": st.column_config.TextColumn("Описание", width="large"),
            "Номер": st.column_config.TextColumn("Номер"),
            "Регион": st.column_config.TextColumn("Регион")
            },
        key="data_editor"
        )        
        
        # Добавляем кнопку для сохранения изменений
        if st.sidebar.button(":red[Завершить редактирование]", use_container_width=True):
            
            # Удаляем пустые строки из таблицы
            edited_df = edited_df.dropna(how='all')
            
            if edited_df is not None and len(edited_df) >= 0:
                
                # Форматируем данные: описание с заглавной буквы, номер прописными буквами
                edited_df['Описание'] = edited_df['Описание'].str.capitalize()
                edited_df['Номер'] = edited_df['Номер'].str.upper()

                # Конвертируем русские буквы в номере в английские
                edited_df['Номер'] = edited_df['Номер'].apply(convert_number)

                # Формируем полный номер автомобиля с регионом
                edited_df['Номер авто'] = edited_df['Номер'].str.replace(r'[^\w\s]', '').str.strip() + edited_df['Регион'].str.replace(r'[^\w\s]', '').str.strip()                
                
                # Сохраняем обновленные данные в оба файла
                df = edited_df.astype(str)  
                df.to_excel(excel_file_path, index=False)
                df.to_csv(csv_file_path, index=False)
            
            # Выходим из режима редактирования и обновляем страницу
            st.session_state.editing_mode = False
            st.rerun()

# Вспомогательная функция для конвертации русских букв в английские
# Обеспечивает корректное отображение номеров в международном формате
def convert_number(number):
    # Словарь соответствия русских и английских букв
    ru_to_en = {
            'А': 'A', 'В': 'B', 'Е': 'E', 'К': 'K', 'М': 'M', 'Н': 'H',
            'О': 'O', 'Р': 'P', 'С': 'C', 'Т': 'T', 'У': 'Y', 'Х': 'X'
        } 
    return ''.join(ru_to_en.get(char, char) for char in number)

"""
Модуль редактирования данных (editData.py)

Этот модуль представляет собой важную часть системы учета автомобилей, обеспечивающую удобное 
редактирование и форматирование данных через веб-интерфейс.

Основные функциональные возможности:

1. Интерактивный редактор данных
   - Динамическая таблица с возможностью добавления новых строк
   - Настроенные колонки для ввода даты, описания, номера и региона
   - Встроенные подсказки по формату ввода данных

2. Автоматическое форматирование данных
   - Капитализация описаний (первая буква заглавная)
   - Преобразование номеров в верхний регистр
   - Автоматическая конвертация русских букв в английские для международного формата
   - Объединение номера с кодом региона

3. Система сохранения данных
   - Автоматическое удаление пустых строк
   - Одновременное сохранение в форматах Excel и CSV
   - Защита от потери данных

4. Удобный пользовательский интерфейс
   - Кнопка активации режима редактирования в боковой панели
   - Кнопка завершения редактирования в боковой панели
   - Автоматическое обновление страницы после сохранения
   - Визуальная индикация режима редактирования

5. Интеллектуальная обработка номеров
   - Специальная функция конвертации символов
   - Поддержка всех допустимых букв в автомобильных номерах
   - Сохранение корректного формата для международного использования

Модуль разработан с учетом удобства использования и обеспечивает надежную 
обработку данных с автоматической валидацией и форматированием.
"""
